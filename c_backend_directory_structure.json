{
  "project_name": "Backend Structure",
  "analysis_date": "2025-05-28 17:37:23",
  "version": 4,
  "root": {
    "name": "ONE1",
    "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1",
    "subdirectories": {
      "backend": {
        "name": "backend",
        "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend",
        "subdirectories": {
          "API_endpoints_and_controllers": {
            "name": "API_endpoints_and_controllers",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\API_endpoints_and_controllers",
            "subdirectories": {},
            "files": [
              "add_axis_labels.py",
              "album_organizer.py",
              "Calculations.py",
              "Calculations_and_Sensitivity-LL.py",
              "CalSen.py",
              "ConfigurationAPI.py",
              "Create_new_batch.py",
              "generate_plots.py",
              "html_album_organizer.py",
              "IND2751.py",
              "Load.py",
              "PNG.py",
              "process_sensitivity_results.py",
              "Remove_batch.py",
              "script_econ.py",
              "sense_config_base.py",
              "sensitivity_api.py",
              "Sub.py",
              "Subplot_metadata.py",
              "Version_service.py"
            ]
          },
          "Configuration_management": {
            "name": "Configuration_management",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Configuration_management",
            "subdirectories": {},
            "files": [
              "config-modules-updated.py",
              "config_modules.py",
              "formatter-updated.py",
              "formatter.py",
              "module1-updated.py",
              "module1.py",
              "table-updated.py",
              "Table.py"
            ]
          },
          "Core_calculation_engines": {
            "name": "Core_calculation_engines",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Core_calculation_engines",
            "subdirectories": {
              "CFA_operations": {
                "name": "CFA_operations",
                "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Core_calculation_engines\\CFA_operations",
                "subdirectories": {},
                "files": [
                  "config_operations.py",
                  "expense_operations.py",
                  "revenue_operations.py",
                  "tax_operations.py",
                  "utility.py",
                  "visualization_operations.py",
                  "__init__.py"
                ]
              }
            },
            "files": [
              "app_CFA.log",
              "CFA-b.py",
              "consolidated_cfa_new.py",
              "keyword_constants.py",
              "price_optimization.log"
            ]
          },
          "Data_processors_and_transformers": {
            "name": "Data_processors_and_transformers",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Data_processors_and_transformers",
            "subdirectories": {},
            "files": [
              "Front_Subtab_HTML.py",
              "Front_Subtab_Plot.py",
              "Front_Subtab_Table.py"
            ]
          },
          "Logs": {
            "name": "Logs",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Logs",
            "subdirectories": {},
            "files": [
              "CALCULATIONS_SENSITIVITY.log",
              "CALSEN.log",
              "CFA_CALC.log",
              "CONFIG_COPY.log",
              "Flask_Sub.log",
              "SENSITIVITY.log"
            ]
          },
          "Utility_functions": {
            "name": "Utility_functions",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Utility_functions",
            "subdirectories": {},
            "files": [
              "common_utils.py",
              "file_utils.py",
              "property_mapping_service.py"
            ]
          },
          "Visualization_generators": {
            "name": "Visualization_generators",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\Visualization_generators",
            "subdirectories": {},
            "files": [
              "AggregatedSubPlots.py",
              "cfa_plotting.py",
              "PNG_PLOT.py"
            ]
          },
          "api": {
            "name": "api",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\api",
            "subdirectories": {},
            "files": [
              "__init__.py"
            ]
          },
          "data": {
            "name": "data",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\data",
            "subdirectories": {},
            "files": [
              "sensitivity_file_manager.py",
              "__init__.py"
            ]
          },
          "database": {
            "name": "database",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\database",
            "subdirectories": {},
            "files": [
              "clickhouse_config.py",
              "initialize_databases.py",
              "postgresql_config.py"
            ]
          },
          "file_associations": {
            "name": "file_associations",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\file_associations",
            "subdirectories": {
              "output": {
                "name": "output",
                "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\file_associations\\output",
                "subdirectories": {},
                "files": [
                  "file_associations_20250429_122909.json",
                  "file_associations_summary_20250429_122909.json"
                ]
              }
            },
            "files": []
          },
          "flask_api": {
            "name": "flask_api",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\flask_api",
            "subdirectories": {
              "routes": {
                "name": "routes",
                "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\flask_api\\routes",
                "subdirectories": {},
                "files": [
                  "theme_routes.py"
                ]
              }
            },
            "files": []
          },
          "services": {
            "name": "services",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\services",
            "subdirectories": {},
            "files": [
              "__init__.py"
            ]
          },
          "templates": {
            "name": "templates",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\templates",
            "subdirectories": {},
            "files": [
              "index.html"
            ]
          },
          "utils": {
            "name": "utils",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\utils",
            "subdirectories": {},
            "files": [
              "file_utils.py",
              "locking_utils.py",
              "script_runner.py",
              "__init__.py"
            ]
          },
          "visualization": {
            "name": "visualization",
            "absolute_path": "C:\\Users\\Mohse\\IdeaProjects3\\ONE1\\backend\\visualization",
            "subdirectories": {},
            "files": [
              "__init__.py"
            ]
          }
        },
        "files": [
          "requirements.txt"
        ]
      }
    },
    "files": [
      ".env",
      ".env.development",
      ".env.production",
      ".eslintrc.js",
      ".gitignore",
      "branch-documentation.md",
      "clean_116_directory.py",
      "config-overrides.js",
      "create_junie_plugin_structure.bat",
      "c_backend_directory_structure.py",
      "documentation_tracking.json",
      "file_history_log.md",
      "find_large_files.py",
      "find_large_src_files.py",
      "g_src_directory_scanner.json",
      "g_src_directory_scanner.py",
      "jotai_state_management_guide.md",
      "jsconfig.json",
      "jsconfig.md",
      "labelUpdate-updated.js",
      "large_files_analysis.json",
      "LICENSE",
      "master-server.js",
      "matrix-submission-service.js",
      "ModEcon Matrix System Documentation.md",
      "MultiAgentSystem-ExecutionPlan",
      "package-lock.json",
      "package.json",
      "postman_collection.json",
      "Project Upgrade Step Wise",
      "qodana.yaml",
      "README.md",
      "reduce_codebase.py",
      "replace_with_commentary.py",
      "server.py",
      "src_large_files_analysis.json",
      "start_servers.py",
      "submitCompleteSet-updated.js",
      "submit_parameter_append-updated.js",
      "subplot_metadata.log",
      "text.txt",
      "visualization_runner.py"
    ]
  },
  "api_endpoints": [
    {
      "path": "/analyze-project",
      "method": "POST",
      "function": "analyze_project",
      "file": "server.py",
      "description": ""
    },
    {
      "path": "/analyze-project",
      "method": "OPTIONS",
      "function": "analyze_project",
      "file": "server.py",
      "description": ""
    },
    {
      "path": "/generate-insights",
      "method": "POST",
      "function": "generate_insights",
      "file": "server.py",
      "description": ""
    },
    {
      "path": "/generate-insights",
      "method": "OPTIONS",
      "function": "generate_insights",
      "file": "server.py",
      "description": ""
    },
    {
      "path": "/",
      "method": "GET",
      "function": "index",
      "file": "server.py",
      "description": ""
    },
    {
      "path": "/<path:filename>",
      "method": "GET",
      "function": "serve_file",
      "file": "server.py",
      "description": ""
    },
    {
      "path": "/",
      "method": "GET",
      "function": "index",
      "file": "backend\\cfa_list.py",
      "description": "Render the selection interface"
    },
    {
      "path": "/api/versions",
      "method": "GET",
      "function": "api_versions",
      "file": "backend\\cfa_list.py",
      "description": "Return the list of available CFA versions"
    },
    {
      "path": "/api/directory-structure",
      "method": "GET",
      "function": "directory_structure",
      "file": "backend\\cfa_list.py",
      "description": "Debug endpoint to return the directory structure"
    },
    {
      "path": "/api/select-versions",
      "method": "POST",
      "function": "select_versions",
      "file": "backend\\cfa_list.py",
      "description": "Update the selected versions based on the request"
    },
    {
      "path": "/api/process/<version>",
      "method": "GET",
      "function": "process_cfa_file",
      "file": "backend\\cfa_list.py",
      "description": "Process the CFA file for the specified version"
    },
    {
      "path": "/api/process-selected",
      "method": "GET",
      "function": "process_selected",
      "file": "backend\\cfa_list.py",
      "description": "Process all selected CFA files"
    },
    {
      "path": "/api/consolidate",
      "method": "POST",
      "function": "start_consolidation",
      "file": "backend\\cfa_list.py",
      "description": "Start a consolidation job for the specified versions"
    },
    {
      "path": "/api/consolidate/status/<job_id>",
      "method": "GET",
      "function": "get_consolidation_status",
      "file": "backend\\cfa_list.py",
      "description": "Get the status of a consolidation job"
    },
    {
      "path": "/api/consolidate/results/<job_id>",
      "method": "GET",
      "function": "get_consolidation_results",
      "file": "backend\\cfa_list.py",
      "description": "Get the results of a completed consolidation job"
    },
    {
      "path": "/api/cell-details",
      "method": "POST",
      "function": "get_cell_details",
      "file": "backend\\cfa_list.py",
      "description": "Get detailed breakdown of a specific cell, particularly for summed columns\n    such as Revenue and Operating Expenses, showing the contribution from each version."
    },
    {
      "path": "/stream_price/<version>",
      "method": "GET",
      "function": "stream_price",
      "file": "backend\\API_endpoints_and_controllers\\Calculations.py",
      "description": "Stream real-time price optimization updates for a specific version using Server-Sent Events (SSE).\n    This endpoint connects to a PriceOptimizationMonitor that watches status files for changes."
    },
    {
      "path": "/price/<version>",
      "method": "GET",
      "function": "get_price",
      "file": "backend\\API_endpoints_and_controllers\\Calculations.py",
      "description": "Get the final optimized price for a specific version"
    },
    {
      "path": "/run",
      "method": "POST",
      "function": "run_scripts",
      "file": "backend\\API_endpoints_and_controllers\\Calculations.py",
      "description": ""
    },
    {
      "path": "/status",
      "method": "GET",
      "function": "get_pipeline_status",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Get current pipeline execution status"
    },
    {
      "path": "/register_payload",
      "method": "POST",
      "function": "register_payload",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Register payload and initialize pipeline"
    },
    {
      "path": "/baseline_calculation",
      "method": "POST",
      "function": "baseline_calculation",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Perform baseline calculation without sensitivity variations"
    },
    {
      "path": "/sensitivity/configure",
      "method": "POST",
      "function": "configure_sensitivity",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Generate and save sensitivity configurations"
    },
    {
      "path": "/runs",
      "method": "POST",
      "function": "run_calculations",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Execute sensitivity calculations based on configured parameters"
    },
    {
      "path": "/calculate-sensitivity",
      "method": "POST",
      "function": "calculate_sensitivity",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Execute specific sensitivity calculations using CFA-b.py with paths from CalSen service.\n    This endpoint runs after the general sensitivity configurations and runs have completed.\n    It leverages the CalSen service for path resolution to ensure consistent file locations."
    },
    {
      "path": "/api/sensitivity/visualize",
      "method": "POST",
      "function": "sensitivity_visualize",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Generate visualization data for sensitivity analysis.\n\n    Expected JSON payload:\n    {\n        \"version\": 1,\n        \"param_id\": \"S10\",\n        \"mode\": \"percentage\",\n        \"compareToKey\": \"S13\",\n        \"plotTypes\": [\"waterfall\", \"bar\", \"point\"]\n    }"
    },
    {
      "path": "/api/sensitivity/parameters",
      "method": "GET",
      "function": "get_sensitivity_parameters",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Get all available sensitivity parameters for visualization."
    },
    {
      "path": "/run-all-sensitivity",
      "method": "POST",
      "function": "run_all_sensitivity",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Unified wrapper to execute all sensitivity endpoints sequentially.\n    Meant to replicate frontend's full analysis process with a single call."
    },
    {
      "path": "/check-calsen-paths",
      "method": "GET",
      "function": "check_calsen_paths",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Check if calsen_paths.json exists for the specified version."
    },
    {
      "path": "/run-script-econ",
      "method": "POST",
      "function": "run_script_econ",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Extract metrics from Economic Summary CSV files and append them to calsen_paths.json\n    using the incorporated extract_metrics_to_json function."
    },
    {
      "path": "/run-add-axis-labels",
      "method": "POST",
      "function": "run_add_axis_labels",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Execute add_axis_labels.py to add axis labels to sensitivity plots."
    },
    {
      "path": "/run-generate-plots",
      "method": "POST",
      "function": "run_generate_plots",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Generate sensitivity plots using the incorporated generate_plots function."
    },
    {
      "path": "/run-html-album-organizer",
      "method": "POST",
      "function": "run_html_album_organizer",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Organize HTML plot files into standardized album directories using the incorporated organize_html_albums function."
    },
    {
      "path": "/run-album-organizer",
      "method": "POST",
      "function": "run_album_organizer",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Organize PNG plots into standardized album directories using the incorporated organize_plot_albums function."
    },
    {
      "path": "/run-process-sensitivity-results",
      "method": "POST",
      "function": "run_process_sensitivity_results",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Process sensitivity results using the incorporated process_sensitivity_results function."
    },
    {
      "path": "/reset_pipeline",
      "method": "POST",
      "function": "reset_pipeline",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Reset the execution pipeline and clear all event flags"
    },
    {
      "path": "/health",
      "method": "GET",
      "function": "health_check",
      "file": "backend\\API_endpoints_and_controllers\\Calculations_and_Sensitivity-LL.py",
      "description": "Health check endpoint that's always accessible"
    },
    {
      "path": "/health",
      "method": "GET",
      "function": "health_check",
      "file": "backend\\API_endpoints_and_controllers\\CalSen.py",
      "description": "Health check endpoint"
    },
    {
      "path": "/get_config_paths",
      "method": "POST",
      "function": "get_config_paths",
      "file": "backend\\API_endpoints_and_controllers\\CalSen.py",
      "description": "Get configuration paths based on version and payload.\n\n    Expected JSON request format:\n    {\n        \"version\": 1,\n        \"payload\": {\n            \"selectedVersions\": [1],\n            \"selectedV\": {\"V1\": \"on\", ...},\n            \"selectedF\": {\"F1\": \"on\", ...},\n            \"calculationOption\": \"freeFlowNPV\",\n            \"targetRow\": 20,\n            \"SenParameters\": {\n                \"S13\": {\n                    \"enabled\": true,\n                    \"mode\": \"percentage\",\n                    \"values\": [10],\n                    ...\n                },\n                ...\n            }\n        }\n    }"
    },
    {
      "path": "/find_config_files",
      "method": "POST",
      "function": "find_config_files",
      "file": "backend\\API_endpoints_and_controllers\\CalSen.py",
      "description": "Find configuration files based on provided filters.\n\n    Expected JSON request format:\n    {\n        \"version\": 1,\n        \"param_id\": \"S35\",  # Optional\n        \"mode\": \"percentage\",  # Optional\n        \"variation\": 10.0  # Optional\n    }"
    },
    {
      "path": "/list_parameters",
      "method": "POST",
      "function": "list_parameters",
      "file": "backend\\API_endpoints_and_controllers\\CalSen.py",
      "description": "List all enabled sensitivity parameters for a version.\n\n    Expected JSON request format:\n    {\n        \"version\": 1\n    }"
    },
    {
      "path": "/load_configuration",
      "method": "POST",
      "function": "load_configuration",
      "file": "backend\\API_endpoints_and_controllers\\ConfigurationAPI.py",
      "description": ""
    },
    {
      "path": "/delete_custom_param",
      "method": "POST",
      "function": "delete_custom_param",
      "file": "backend\\API_endpoints_and_controllers\\ConfigurationAPI.py",
      "description": "Delete a customized parameter from the U_configurations file.\n\n    Expected JSON payload:\n    {\n        \"version\": \"1\",\n        \"paramId\": \"someParameterId\",\n        \"start\": 5,\n        \"end\": 10\n    }\n\n    Returns:\n        JSON response with success message or error"
    },
    {
      "path": "/create_new_batch",
      "method": "POST",
      "function": "create_new_batch_route",
      "file": "backend\\API_endpoints_and_controllers\\Create_new_batch.py",
      "description": ""
    },
    {
      "path": "/inject-names",
      "method": "POST",
      "function": "inject_names",
      "file": "backend\\API_endpoints_and_controllers\\IND2751.py",
      "description": ""
    },
    {
      "path": "/load_configuration",
      "method": "POST",
      "function": "load_configuration",
      "file": "backend\\API_endpoints_and_controllers\\Load.py",
      "description": ""
    },
    {
      "path": "/generate_png_plots",
      "method": "POST",
      "function": "run_scripts",
      "file": "backend\\API_endpoints_and_controllers\\PNG.py",
      "description": "Main endpoint for running PNG visualization scripts.\n    Handles request validation, script execution, and error handling.\n\n    Returns:\n        tuple: (response, status_code)"
    },
    {
      "path": "/api/plots/<version>",
      "method": "GET",
      "function": "get_plots",
      "file": "backend\\API_endpoints_and_controllers\\PNG.py",
      "description": "Get all plots for a specific version.\n\n    Args:\n        version (str): The version number\n\n    Returns:\n        Tuple[Response, int]: JSON response with plot information and HTTP status code"
    },
    {
      "path": "/api/plots/<version>/<category>/<group>",
      "method": "GET",
      "function": "get_plots_by_group",
      "file": "backend\\API_endpoints_and_controllers\\PNG.py",
      "description": "Get plots for a specific version, category, and group.\n\n    Args:\n        version (str): The version number\n        category (str): The plot category\n        group (str): The plot group\n\n    Returns:\n        JSON response with plot information"
    },
    {
      "path": "/api/sensitivity-plots/<version>",
      "method": "GET",
      "function": "get_sensitivity_plots",
      "file": "backend\\API_endpoints_and_controllers\\PNG.py",
      "description": "Get all sensitivity plots for a specific version.\n\n    Args:\n        version (str): The version number\n\n    Returns:\n        JSON response with plot information"
    },
    {
      "path": "/api/sensitivity-plots/<version>/<category>/<group>",
      "method": "GET",
      "function": "get_sensitivity_plots_by_group",
      "file": "backend\\API_endpoints_and_controllers\\PNG.py",
      "description": "Get sensitivity plots for a specific version, category, and group.\n\n    Args:\n        version (str): The version number\n        category (str): The plot category\n        group (str): The plot group\n\n    Returns:\n        JSON response with plot information"
    },
    {
      "path": "/images/<path:filename>",
      "method": "GET",
      "function": "serve_image",
      "file": "backend\\API_endpoints_and_controllers\\PNG.py",
      "description": "Serve image files from the Original directory\n\n    Args:\n        filename (str): Path to the image file relative to PUBLIC_DIR\n\n    Returns:\n        Union[Response, Tuple[Response, int]]: The image file or an error response"
    },
    {
      "path": "/clear-log",
      "method": "POST",
      "function": "clear_log_endpoint",
      "file": "backend\\API_endpoints_and_controllers\\Remove_batch.py",
      "description": "Clear the contents of a specified log file."
    },
    {
      "path": "/Remove_batch",
      "method": "POST",
      "function": "remove_batch_endpoint",
      "file": "backend\\API_endpoints_and_controllers\\Remove_batch.py",
      "description": "Handle batch removal via POST request."
    },
    {
      "path": "/copy-config-modules",
      "method": "POST",
      "function": "copy_config_modules",
      "file": "backend\\API_endpoints_and_controllers\\sense_config_base.py",
      "description": "Endpoint to process all configuration modules with sensitivity variations."
    },
    {
      "path": "/health",
      "method": "GET",
      "function": "health_check",
      "file": "backend\\API_endpoints_and_controllers\\sense_config_base.py",
      "description": "Health check endpoint for server detection.\n    Returns a 200 OK response with basic server information."
    },
    {
      "path": "/runSub",
      "method": "POST",
      "function": "run_scripts",
      "file": "backend\\API_endpoints_and_controllers\\Sub.py",
      "description": ""
    },
    {
      "path": "/subplotMetadata",
      "method": "GET",
      "function": "get_subplot_metadata",
      "file": "backend\\API_endpoints_and_controllers\\Subplot_metadata.py",
      "description": "Endpoint to retrieve metadata about available subplots\n    Provides information about available metrics and visualizations\n    \n    Returns:\n        JSON response with subplot metadata"
    },
    {
      "path": "/versions",
      "method": "GET",
      "function": "list_versions_route",
      "file": "backend\\API_endpoints_and_controllers\\Version_service.py",
      "description": ""
    },
    {
      "path": "/formatter/<version>",
      "method": "GET",
      "function": "run_formatter",
      "file": "backend\\Configuration_management\\formatter-updated.py",
      "description": "Run the formatter for a specific version."
    },
    {
      "path": "/module1/<version>",
      "method": "GET",
      "function": "run_module1",
      "file": "backend\\Configuration_management\\module1-updated.py",
      "description": "Run module1 for a specific version."
    },
    {
      "path": "/table/<version>",
      "method": "GET",
      "function": "run_table",
      "file": "backend\\Configuration_management\\table-updated.py",
      "description": "Run the Table module for a specific version."
    },
    {
      "path": "/api/album_html/<version>",
      "method": "GET",
      "function": "get_html_files",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": ""
    },
    {
      "path": "/static/html/<version>/<album>/<filename>",
      "method": "GET",
      "function": "serve_html",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": "Serve HTML files from the correct directory based on version and album"
    },
    {
      "path": "/test",
      "method": "GET",
      "function": "test",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": "Simple test endpoint to check if the server is running"
    },
    {
      "path": "/test/album_endpoints",
      "method": "GET",
      "function": "test_album_endpoints",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": "Test endpoint to verify the album HTML content endpoints are working\n\n    This endpoint tests both /api/album_html_content/<album> and /api/album_html_all\n    by attempting to find and retrieve content from the first available album.\n\n    Returns:\n        JSON response with test results"
    },
    {
      "path": "/api/album_html_content/<album>",
      "method": "GET",
      "function": "get_album_html_content",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": "Fetch HTML content for a specific album\n\n    Args:\n        album: The album identifier\n\n    Returns:\n        JSON response with the album's HTML content"
    },
    {
      "path": "/api/album_html_all",
      "method": "GET",
      "function": "get_all_albums_html",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": "Fetch HTML content for all albums across specified versions\n\n    Query parameters:\n        version: One or more version numbers (can be specified multiple times)\n\n    Returns:\n        JSON response with all albums' HTML content"
    },
    {
      "path": "/api/logs",
      "method": "GET",
      "function": "get_logs",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_HTML.py",
      "description": "Return the most recent log entries"
    },
    {
      "path": "/api/album/<version>",
      "method": "GET",
      "function": "get_png_files",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_Plot.py",
      "description": ""
    },
    {
      "path": "/api/csv-files/<version>",
      "method": "GET",
      "function": "get_csv_files",
      "file": "backend\\Data_processors_and_transformers\\Front_Subtab_Table.py",
      "description": ""
    },
    {
      "path": "/api/probing/status",
      "method": "GET",
      "function": "get_status",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get the status of the probing module."
    },
    {
      "path": "/api/probing/scan-changes",
      "method": "POST",
      "function": "api_scan_changes",
      "file": "probing-new\\src\\api-module.py",
      "description": "Scan for changes in monitored directories."
    },
    {
      "path": "/api/probing/integrated-data",
      "method": "GET",
      "function": "api_get_integrated_data",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get all integrated data from all modules."
    },
    {
      "path": "/api/probing/file-associations/latest",
      "method": "GET",
      "function": "api_get_latest_file_associations",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get the latest file associations data."
    },
    {
      "path": "/api/probing/file-associations/download",
      "method": "GET",
      "function": "api_download_file_associations",
      "file": "probing-new\\src\\api-module.py",
      "description": "Download file associations data as a JSON file."
    },
    {
      "path": "/api/probing/visualization-data/sample",
      "method": "GET",
      "function": "api_get_visualization_sample_data",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get sample data for visualizations."
    },
    {
      "path": "/api/probing/visualizations",
      "method": "GET",
      "function": "api_get_visualizations",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get available visualizations."
    },
    {
      "path": "/api/probing/visualization",
      "method": "POST",
      "function": "api_render_visualization",
      "file": "probing-new\\src\\api-module.py",
      "description": "Render a visualization with the provided data."
    },
    {
      "path": "/api/probing/code-analysis/analyzers",
      "method": "GET",
      "function": "api_get_code_analyzers",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get available code analyzers."
    },
    {
      "path": "/api/probing/code-analysis/sample-code",
      "method": "GET",
      "function": "api_get_sample_code",
      "file": "probing-new\\src\\api-module.py",
      "description": "Get sample code for analysis."
    },
    {
      "path": "/api/probing/analyze-direct",
      "method": "POST",
      "function": "api_analyze_code_direct",
      "file": "probing-new\\src\\api-module.py",
      "description": "Analyze code directly using the connector."
    },
    {
      "path": "/api/probing/visualize-direct",
      "method": "POST",
      "function": "api_visualize_data_direct",
      "file": "probing-new\\src\\api-module.py",
      "description": "Visualize data directly using the connector."
    },
    {
      "path": "/api/probing/insights/generate",
      "method": "POST",
      "function": "api_generate_insights",
      "file": "probing-new\\src\\api-module.py",
      "description": "Generate insights from all available data."
    },
    {
      "path": "/api/probing/generate-report",
      "method": "POST",
      "function": "api_generate_report",
      "file": "probing-new\\src\\api-module.py",
      "description": "Generate an integrated report."
    },
    {
      "path": "/api/probing/download-report",
      "method": "GET",
      "function": "api_download_report",
      "file": "probing-new\\src\\api-module.py",
      "description": "Download a generated report."
    },
    {
      "path": "/",
      "method": "GET",
      "function": "index",
      "file": "probing-new\\src\\server-module.py",
      "description": "Serve the main index.html file."
    },
    {
      "path": "/<path:path>",
      "method": "GET",
      "function": "static_files",
      "file": "probing-new\\src\\server-module.py",
      "description": "Serve static files from the public directory."
    }
  ]
}
