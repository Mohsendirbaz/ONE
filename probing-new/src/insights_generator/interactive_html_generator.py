"""
Interactive HTML Generator Module

This module provides functionality for generating interactive HTML reports
that combine insights and visualizations from the insights generator.
"""

import os
import logging
import html
import json
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class InteractiveHTMLGenerator:
    """
    A class for generating interactive HTML reports.
    
    This class provides methods for generating interactive HTML reports
    that combine insights and visualizations from the insights generator.
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        Initialize the InteractiveHTMLGenerator with optional configuration.
        
        Args:
            config: Optional configuration dictionary
        """
        self.config = config or {}
        self.default_css = self._get_default_css()
        self.default_js = self._get_default_js()
        logger.info("InteractiveHTMLGenerator initialized with config: %s", self.config)
    
    def generate_insights_report(self, insights_data: Dict[str, Any], 
                               title: str = "Insights Report") -> str:
        """
        Generate an HTML report for insights.
        
        Args:
            insights_data: Insights data from the InsightsMiner
            title: Title of the report
            
        Returns:
            HTML code for the report
        """
        logger.info("Generating insights report")
        
        if not insights_data or "insights" not in insights_data:
            logger.error("No insights data provided")
            return "<div class='error'>No insights data provided</div>"
        
        insights = insights_data.get("insights", [])
        timestamp = insights_data.get("timestamp", datetime.now().isoformat())
        source_path = insights_data.get("source_path", "")
        
        # Group insights by type
        insights_by_type = {}
        for insight in insights:
            insight_type = insight.get("type", "Unknown")
            if insight_type not in insights_by_type:
                insights_by_type[insight_type] = []
            insights_by_type[insight_type].append(insight)
        
        # Generate HTML for insights
        insights_html = ""
        for insight_type, type_insights in insights_by_type.items():
            insights_html += f"<h3>{html.escape(insight_type)}</h3>\n"
            insights_html += "<ul class='insights-list'>\n"
            for insight in type_insights:
                confidence = insight.get("confidence", 0)
                description = insight.get("description", "")
                insights_html += f"""
                <li class="insight-item">
                    <div class="insight-header">
                        <span class="insight-confidence">{confidence}% confidence</span>
                    </div>
                    <div class="insight-description">{html.escape(description)}</div>
                </li>
                """
            insights_html += "</ul>\n"
        
        # Generate the full HTML report
        html_report = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>{html.escape(title)}</title>
            <style>
                {self.default_css}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>{html.escape(title)}</h1>
                    <div class="metadata">
                        <p><strong>Generated:</strong> {timestamp}</p>
                        <p><strong>Source:</strong> {html.escape(source_path)}</p>
                        <p><strong>Total Insights:</strong> {len(insights)}</p>
                    </div>
                </header>
                
                <main>
                    <section class="insights-section">
                        <h2>Insights</h2>
                        {insights_html}
                    </section>
                </main>
                
                <footer>
                    <p>Generated by Insights Generator</p>
                </footer>
            </div>
            
            <script>
                {self.default_js}
            </script>
        </body>
        </html>
        """
        
        return html_report
    
    def generate_network_report(self, network_analysis: Dict[str, Any], 
                              network_visualizations: Dict[str, str],
                              title: str = "Network Analysis Report") -> str:
        """
        Generate an HTML report for network analysis.
        
        Args:
            network_analysis: Network analysis results from the NetworkAnalyzer
            network_visualizations: Dictionary mapping network types to HTML visualizations
            title: Title of the report
            
        Returns:
            HTML code for the report
        """
        logger.info("Generating network report")
        
        if not network_analysis:
            logger.error("No network analysis data provided")
            return "<div class='error'>No network analysis data provided</div>"
        
        timestamp = network_analysis.get("timestamp", datetime.now().isoformat())
        source_path = network_analysis.get("source_path", "")
        
        # Generate HTML for network metrics
        metrics_html = ""
        
        # Code network metrics
        code_network = network_analysis.get("code_network", {})
        if code_network and "error" not in code_network:
            metrics_html += "<h3>Code Network Metrics</h3>\n"
            metrics_html += "<ul class='metrics-list'>\n"
            metrics_html += f"<li><strong>Nodes:</strong> {code_network.get('node_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Edges:</strong> {code_network.get('edge_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Density:</strong> {code_network.get('density', 0):.4f}</li>\n"
            
            # Central nodes
            central_nodes = code_network.get("central_nodes", [])
            if central_nodes:
                metrics_html += "<li><strong>Central Nodes:</strong>\n<ul>\n"
                for node in central_nodes[:5]:  # Show top 5
                    node_name = node.get("node", "")
                    combined_score = node.get("combined_score", 0)
                    metrics_html += f"<li>{html.escape(node_name)} (Score: {combined_score:.4f})</li>\n"
                metrics_html += "</ul>\n</li>\n"
            
            metrics_html += "</ul>\n"
        
        # Financial network metrics
        financial_network = network_analysis.get("financial_network", {})
        if financial_network and "error" not in financial_network:
            metrics_html += "<h3>Financial Network Metrics</h3>\n"
            metrics_html += "<ul class='metrics-list'>\n"
            metrics_html += f"<li><strong>Nodes:</strong> {financial_network.get('node_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Edges:</strong> {financial_network.get('edge_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Density:</strong> {financial_network.get('density', 0):.4f}</li>\n"
            
            # Central nodes
            central_nodes = financial_network.get("central_nodes", [])
            if central_nodes:
                metrics_html += "<li><strong>Central Nodes:</strong>\n<ul>\n"
                for node in central_nodes[:5]:  # Show top 5
                    node_name = node.get("node", "")
                    centrality = node.get("centrality", 0)
                    metrics_html += f"<li>{html.escape(node_name)} (Centrality: {centrality:.4f})</li>\n"
                metrics_html += "</ul>\n</li>\n"
            
            metrics_html += "</ul>\n"
        
        # File network metrics
        file_network = network_analysis.get("file_network", {})
        if file_network and "error" not in file_network:
            metrics_html += "<h3>File Network Metrics</h3>\n"
            metrics_html += "<ul class='metrics-list'>\n"
            metrics_html += f"<li><strong>Nodes:</strong> {file_network.get('node_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Edges:</strong> {file_network.get('edge_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Density:</strong> {file_network.get('density', 0):.4f}</li>\n"
            
            # Central files
            central_files = file_network.get("central_files", [])
            if central_files:
                metrics_html += "<li><strong>Central Files:</strong>\n<ul>\n"
                for file_data in central_files[:5]:  # Show top 5
                    file_name = file_data.get("file", "")
                    centrality = file_data.get("centrality", 0)
                    metrics_html += f"<li>{html.escape(file_name)} (Centrality: {centrality:.4f})</li>\n"
                metrics_html += "</ul>\n</li>\n"
            
            metrics_html += "</ul>\n"
        
        # Generate HTML for network visualizations
        visualizations_html = ""
        
        # Code network visualization
        code_viz = network_visualizations.get("code_network", "")
        if code_viz:
            visualizations_html += "<h3>Code Network Visualization</h3>\n"
            visualizations_html += "<div class='visualization-container'>\n"
            visualizations_html += "<iframe src='code_network.html' width='100%' height='500px' frameborder='0'></iframe>\n"
            visualizations_html += "</div>\n"
        
        # Financial network visualization
        financial_viz = network_visualizations.get("financial_network", "")
        if financial_viz:
            visualizations_html += "<h3>Financial Network Visualization</h3>\n"
            visualizations_html += "<div class='visualization-container'>\n"
            visualizations_html += "<iframe src='financial_network.html' width='100%' height='500px' frameborder='0'></iframe>\n"
            visualizations_html += "</div>\n"
        
        # File network visualization
        file_viz = network_visualizations.get("file_network", "")
        if file_viz:
            visualizations_html += "<h3>File Network Visualization</h3>\n"
            visualizations_html += "<div class='visualization-container'>\n"
            visualizations_html += "<iframe src='file_network.html' width='100%' height='500px' frameborder='0'></iframe>\n"
            visualizations_html += "</div>\n"
        
        # Generate the full HTML report
        html_report = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>{html.escape(title)}</title>
            <style>
                {self.default_css}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>{html.escape(title)}</h1>
                    <div class="metadata">
                        <p><strong>Generated:</strong> {timestamp}</p>
                        <p><strong>Source:</strong> {html.escape(source_path)}</p>
                    </div>
                </header>
                
                <main>
                    <section class="metrics-section">
                        <h2>Network Metrics</h2>
                        {metrics_html}
                    </section>
                    
                    <section class="visualizations-section">
                        <h2>Network Visualizations</h2>
                        {visualizations_html}
                    </section>
                </main>
                
                <footer>
                    <p>Generated by Insights Generator</p>
                </footer>
            </div>
            
            <script>
                {self.default_js}
            </script>
        </body>
        </html>
        """
        
        return html_report
    
    def generate_comprehensive_report(self, insights_data: Dict[str, Any], 
                                    network_analysis: Dict[str, Any],
                                    network_visualizations: Dict[str, str],
                                    title: str = "Comprehensive Analysis Report") -> str:
        """
        Generate a comprehensive HTML report combining insights and network analysis.
        
        Args:
            insights_data: Insights data from the InsightsMiner
            network_analysis: Network analysis results from the NetworkAnalyzer
            network_visualizations: Dictionary mapping network types to HTML visualizations
            title: Title of the report
            
        Returns:
            HTML code for the report
        """
        logger.info("Generating comprehensive report")
        
        if not insights_data or "insights" not in insights_data:
            logger.error("No insights data provided")
            return "<div class='error'>No insights data provided</div>"
        
        if not network_analysis:
            logger.error("No network analysis data provided")
            return "<div class='error'>No network analysis data provided</div>"
        
        insights = insights_data.get("insights", [])
        timestamp = insights_data.get("timestamp", datetime.now().isoformat())
        source_path = insights_data.get("source_path", "")
        
        # Group insights by type
        insights_by_type = {}
        for insight in insights:
            insight_type = insight.get("type", "Unknown")
            if insight_type not in insights_by_type:
                insights_by_type[insight_type] = []
            insights_by_type[insight_type].append(insight)
        
        # Generate HTML for insights
        insights_html = ""
        for insight_type, type_insights in insights_by_type.items():
            insights_html += f"<h3>{html.escape(insight_type)}</h3>\n"
            insights_html += "<ul class='insights-list'>\n"
            for insight in type_insights:
                confidence = insight.get("confidence", 0)
                description = insight.get("description", "")
                insights_html += f"""
                <li class="insight-item">
                    <div class="insight-header">
                        <span class="insight-confidence">{confidence}% confidence</span>
                    </div>
                    <div class="insight-description">{html.escape(description)}</div>
                </li>
                """
            insights_html += "</ul>\n"
        
        # Generate HTML for network metrics
        metrics_html = ""
        
        # Code network metrics
        code_network = network_analysis.get("code_network", {})
        if code_network and "error" not in code_network:
            metrics_html += "<h3>Code Network Metrics</h3>\n"
            metrics_html += "<ul class='metrics-list'>\n"
            metrics_html += f"<li><strong>Nodes:</strong> {code_network.get('node_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Edges:</strong> {code_network.get('edge_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Density:</strong> {code_network.get('density', 0):.4f}</li>\n"
            metrics_html += "</ul>\n"
        
        # Financial network metrics
        financial_network = network_analysis.get("financial_network", {})
        if financial_network and "error" not in financial_network:
            metrics_html += "<h3>Financial Network Metrics</h3>\n"
            metrics_html += "<ul class='metrics-list'>\n"
            metrics_html += f"<li><strong>Nodes:</strong> {financial_network.get('node_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Edges:</strong> {financial_network.get('edge_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Density:</strong> {financial_network.get('density', 0):.4f}</li>\n"
            metrics_html += "</ul>\n"
        
        # File network metrics
        file_network = network_analysis.get("file_network", {})
        if file_network and "error" not in file_network:
            metrics_html += "<h3>File Network Metrics</h3>\n"
            metrics_html += "<ul class='metrics-list'>\n"
            metrics_html += f"<li><strong>Nodes:</strong> {file_network.get('node_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Edges:</strong> {file_network.get('edge_count', 0)}</li>\n"
            metrics_html += f"<li><strong>Density:</strong> {file_network.get('density', 0):.4f}</li>\n"
            metrics_html += "</ul>\n"
        
        # Generate HTML for network visualizations
        visualizations_html = ""
        
        # Code network visualization
        code_viz = network_visualizations.get("code_network", "")
        if code_viz:
            visualizations_html += "<h3>Code Network Visualization</h3>\n"
            visualizations_html += "<div class='visualization-container'>\n"
            visualizations_html += "<iframe src='code_network.html' width='100%' height='500px' frameborder='0'></iframe>\n"
            visualizations_html += "</div>\n"
        
        # Financial network visualization
        financial_viz = network_visualizations.get("financial_network", "")
        if financial_viz:
            visualizations_html += "<h3>Financial Network Visualization</h3>\n"
            visualizations_html += "<div class='visualization-container'>\n"
            visualizations_html += "<iframe src='financial_network.html' width='100%' height='500px' frameborder='0'></iframe>\n"
            visualizations_html += "</div>\n"
        
        # File network visualization
        file_viz = network_visualizations.get("file_network", "")
        if file_viz:
            visualizations_html += "<h3>File Network Visualization</h3>\n"
            visualizations_html += "<div class='visualization-container'>\n"
            visualizations_html += "<iframe src='file_network.html' width='100%' height='500px' frameborder='0'></iframe>\n"
            visualizations_html += "</div>\n"
        
        # Generate the full HTML report
        html_report = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>{html.escape(title)}</title>
            <style>
                {self.default_css}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>{html.escape(title)}</h1>
                    <div class="metadata">
                        <p><strong>Generated:</strong> {timestamp}</p>
                        <p><strong>Source:</strong> {html.escape(source_path)}</p>
                        <p><strong>Total Insights:</strong> {len(insights)}</p>
                    </div>
                </header>
                
                <nav class="report-nav">
                    <ul>
                        <li><a href="#insights">Insights</a></li>
                        <li><a href="#metrics">Network Metrics</a></li>
                        <li><a href="#visualizations">Network Visualizations</a></li>
                    </ul>
                </nav>
                
                <main>
                    <section id="insights" class="insights-section">
                        <h2>Insights</h2>
                        {insights_html}
                    </section>
                    
                    <section id="metrics" class="metrics-section">
                        <h2>Network Metrics</h2>
                        {metrics_html}
                    </section>
                    
                    <section id="visualizations" class="visualizations-section">
                        <h2>Network Visualizations</h2>
                        {visualizations_html}
                    </section>
                </main>
                
                <footer>
                    <p>Generated by Insights Generator</p>
                </footer>
            </div>
            
            <script>
                {self.default_js}
            </script>
        </body>
        </html>
        """
        
        return html_report
    
    def save_report(self, report_html: str, output_path: str) -> bool:
        """
        Save an HTML report to a file.
        
        Args:
            report_html: HTML code for the report
            output_path: Path to save the report to
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Create directory if it doesn't exist
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # Write the report to the file
            with open(output_path, "w", encoding="utf-8") as f:
                f.write(report_html)
            
            logger.info(f"Report saved to {output_path}")
            return True
        except Exception as e:
            logger.error(f"Error saving report: {str(e)}")
            return False
    
    def _get_default_css(self) -> str:
        """
        Get the default CSS for reports.
        
        Returns:
            CSS code
        """
        return """
        /* General styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        
        /* Header styles */
        header {
            border-bottom: 1px solid #eee;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }
        
        header h1 {
            color: #2c3e50;
            margin-top: 0;
        }
        
        .metadata {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 4px;
            font-size: 0.9em;
        }
        
        .metadata p {
            margin: 5px 0;
        }
        
        /* Navigation styles */
        .report-nav {
            background-color: #2c3e50;
            margin-bottom: 20px;
        }
        
        .report-nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
        }
        
        .report-nav li {
            margin: 0;
        }
        
        .report-nav a {
            display: block;
            padding: 10px 15px;
            color: #fff;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        
        .report-nav a:hover {
            background-color: #34495e;
        }
        
        /* Section styles */
        section {
            margin-bottom: 30px;
        }
        
        section h2 {
            color: #2c3e50;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        
        section h3 {
            color: #3498db;
            margin-top: 20px;
        }
        
        /* Insights styles */
        .insights-list {
            list-style: none;
            padding: 0;
        }
        
        .insight-item {
            background-color: #f9f9f9;
            border-left: 4px solid #3498db;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 0 4px 4px 0;
        }
        
        .insight-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .insight-confidence {
            background-color: #2ecc71;
            color: white;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.8em;
        }
        
        .insight-description {
            color: #555;
        }
        
        /* Metrics styles */
        .metrics-list {
            list-style: none;
            padding: 0;
        }
        
        .metrics-list li {
            margin-bottom: 10px;
        }
        
        .metrics-list ul {
            margin-top: 5px;
            padding-left: 20px;
        }
        
        /* Visualization styles */
        .visualization-container {
            margin-bottom: 20px;
            border: 1px solid #eee;
            border-radius: 4px;
            overflow: hidden;
        }
        
        /* Footer styles */
        footer {
            text-align: center;
            padding-top: 20px;
            margin-top: 30px;
            border-top: 1px solid #eee;
            color: #7f8c8d;
            font-size: 0.9em;
        }
        
        /* Responsive styles */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .report-nav ul {
                flex-direction: column;
            }
            
            .visualization-container iframe {
                height: 300px;
            }
        }
        """
    
    def _get_default_js(self) -> str:
        """
        Get the default JavaScript for reports.
        
        Returns:
            JavaScript code
        """
        return """
        // Smooth scrolling for navigation links
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.report-nav a');
            
            for (const link of navLinks) {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const targetId = this.getAttribute('href').substring(1);
                    const targetElement = document.getElementById(targetId);
                    
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 20,
                            behavior: 'smooth'
                        });
                    }
                });
            }
        });
        """


# Example usage
if __name__ == "__main__":
    from data_miner import DataMiner
    from entity_analyzer import EntityAnalyzer
    from insights_miner import InsightsMiner
    from network_analyzer import NetworkAnalyzer
    from d3_network_generator import D3NetworkGenerator
    
    # Mine data
    miner = DataMiner()
    data = miner.mine_all_data("./example_repo")
    
    # Analyze entities
    entity_analyzer = EntityAnalyzer()
    analysis_results = entity_analyzer.analyze_all_entities(data)
    
    # Generate insights
    insights_miner = InsightsMiner()
    insights = insights_miner.mine_all_insights(analysis_results, data.get("file_associations", {}))
    
    # Analyze networks
    network_analyzer = NetworkAnalyzer()
    network_analysis = network_analyzer.analyze_all_networks(data)
    
    # Generate network visualizations
    d3_generator = D3NetworkGenerator()
    visualization_files = d3_generator.generate_all_network_visualizations(network_analysis, "./output/visualizations")
    
    # Generate HTML reports
    html_generator = InteractiveHTMLGenerator()
    
    # Generate insights report
    insights_report = html_generator.generate_insights_report(insights)
    html_generator.save_report(insights_report, "./output/insights_report.html")
    
    # Generate network report
    network_report = html_generator.generate_network_report(network_analysis, visualization_files)
    html_generator.save_report(network_report, "./output/network_report.html")
    
    # Generate comprehensive report
    comprehensive_report = html_generator.generate_comprehensive_report(insights, network_analysis, visualization_files)
    html_generator.save_report(comprehensive_report, "./output/comprehensive_report.html")
    
    print("Generated HTML reports:")
    print("- Insights Report: ./output/insights_report.html")
    print("- Network Report: ./output/network_report.html")
    print("- Comprehensive Report: ./output/comprehensive_report.html")
